---
description: 
globs: 
alwaysApply: true
---
# **Клиентское приложение (SolidJS + Rust (Tauri) + SolidUI)**

## **Общая концепция**
Клиент — это минималистичное GUI-приложение для Windows и Linux, аналог Discord, но без сложных механик.  
Используются **SolidJS** для интерфейса и **Rust (Tauri)** для взаимодействия с системой.

---

## **Основные технологии**
- **UI**: SolidJS + SolidUI
- **Бэкенд (локальный)**: Rust (Tauri)
- **Голос и видео**: WebRTC
- **Сборка**: Tauri (Rust + WebView)

---

## **Архитектура**
- **Frontend (SolidJS)**:
  - Чистая компонентная архитектура.
  - Использование сигналов (`createSignal`) и стора (`createStore`).
  - Минимум состояний, максимум реактивности.
  - SolidUI для стилизации.

- **Backend (Rust, Tauri)**:
  - Обработка системных вызовов (WebRTC, файловая система).
  - Минимизация ресурсов (работает как bridge между SolidJS и OS).

---

## **Правила разработки**
### **1. Кодовая структура**
- **Frontend (SolidJS)**:
  - `src/components/` — UI-компоненты.
  - `src/pages/` — Страницы приложения.
  - `src/store/` — Глобальное состояние.
  - `src/utils/` — Хелперы.

- **Backend (Rust, Tauri)**:
  - `src-tauri/src/main.rs` — Точка входа.
  - `src-tauri/src/utils/` — Вспомогательные функции.

---

### **2. Код-стайл**
- **JS/TS**:
  - `camelCase` для переменных и функций.
  - `PascalCase` для компонентов.

- **Rust**:
  - `snake_case` для переменных.

---

### **3. Производительность**
- Минимум глобального состояния.
- Использование **Lazy Components** в SolidJS.
- Rust-оптимизации (`#[inline(always)]`, `Arc<T>`, `async`).

---
